service: lead-survey-backend

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: 'ap-southeast-2'
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
    NODE_ENV: ${self:provider.stage}
    API_BASE_URL: ${opt:stage, 'dev'}-api.example.com
  
  iam:
    role:
      name: ${self:service}-${self:provider.stage}-CloudFormationRole

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

plugins:
  - serverless-typescript

resources:
  Resources:
    ItemsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

functions:
  generatePDF: 
    handler: src/handlers/generatePDF.handler
    events:
      - http:
          path: generate-pdf
          method: post
          cors: true
    dependsOn:
      - ItemsTable
  create:
    handler: src/handlers/create.handler
    events:
      - http:
          path: items
          method: post
          cors: true
    dependsOn:
      - ItemsTable

  get:
    handler: src/handlers/get.handler
    events:
      - http:
          path: items/{id}
          method: get
          cors: true
    dependsOn:
      - ItemsTable
